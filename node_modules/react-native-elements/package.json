{
  "_args": [
    [
      {
        "raw": "react-native-elements@^0.10.3",
        "scope": null,
        "escapedName": "react-native-elements",
        "name": "react-native-elements",
        "rawSpec": "^0.10.3",
        "spec": ">=0.10.3 <0.11.0",
        "type": "range"
      },
      "/Users/alan2305/Desktop/RC"
    ]
  ],
  "_from": "react-native-elements@>=0.10.3 <0.11.0",
  "_id": "react-native-elements@0.10.3",
  "_inCache": true,
  "_location": "/react-native-elements",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-native-elements-0.10.3.tgz_1490823878185_0.890281694708392"
  },
  "_npmUser": {
    "name": "monte9",
    "email": "mthakkar@mail.sfsu.edu"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-elements@^0.10.3",
    "scope": null,
    "escapedName": "react-native-elements",
    "name": "react-native-elements",
    "rawSpec": "^0.10.3",
    "spec": ">=0.10.3 <0.11.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-elements/-/react-native-elements-0.10.3.tgz",
  "_shasum": "ddef62a456cb71a21a2fdf4aa9ee268af7e1cdd0",
  "_shrinkwrap": null,
  "_spec": "react-native-elements@^0.10.3",
  "_where": "/Users/alan2305/Desktop/RC",
  "author": {
    "name": "Nader Dabit"
  },
  "bugs": {
    "url": "https://github.com/dabit3/React-Native-Elements/issues"
  },
  "dependencies": {
    "react-native-side-menu": "^0.20.1",
    "react-native-tab-navigator": "^0.3.3"
  },
  "description": "React Native Elements & UI Toolkit",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "ddef62a456cb71a21a2fdf4aa9ee268af7e1cdd0",
    "tarball": "https://registry.npmjs.org/react-native-elements/-/react-native-elements-0.10.3.tgz"
  },
  "gitHead": "27c4213462c8f37204f2fa5cebef2b680be425eb",
  "homepage": "https://github.com/dabit3/React-Native-Elements#readme",
  "keywords": [
    "react-native",
    "reactjs",
    "reactnative",
    "bootstrap"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "dabit3",
      "email": "dabit3@gmail.com"
    },
    {
      "name": "monte9",
      "email": "mthakkar@mail.sfsu.edu"
    }
  ],
  "name": "react-native-elements",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native-vector-icons": "~4.0.0"
  },
  "readme": "![React Native Elements](http://i.imgur.com/Ok2KaWq.png)\n## Cross Platform React Native UI Toolkit\n\n![React Native UI Toolkit](http://i.imgur.com/UXrGTeG.png)\n\n## Get Started\n\n- If you are using\n[create-react-native-app](github.com/react-community/create-react-native-app)\nor [Expo](https://expo.io), [follow these instructions](https://github.com/react-native-community/react-native-elements/blob/master/using-with-crna-or-expo.md).\n\n- If your project is a standard React Native project (if you have an\nios/android directory and created it with `react-native init`), [follow these installation instructions](https://github.com/react-native-community/react-native-elements/blob/master/installation.md).\n\n## Included\n- [x] [Buttons](https://github.com/react-native-community/react-native-elements#buttons)\n- [x] [Social Icons / Buttons](https://github.com/react-native-community/react-native-elements#social-icons--buttons)\n- [x] [Icons](https://github.com/react-native-community/react-native-elements#icons--icon-buttons)\n- [x] [Side Menu](https://github.com/react-native-community/react-native-elements#sidemenu)\n- [x] [Form Elements](https://github.com/react-native-community/react-native-elements#forms)\n- [x] [Search Bar](https://github.com/react-native-community/react-native-elements#search-bar)\n- [x] [ButtonGroup](https://github.com/react-native-community/react-native-elements#buttongroup)\n- [x] [Checkboxes](https://github.com/react-native-community/react-native-elements#checkboxes)\n- [x] [List Element](https://github.com/react-native-community/react-native-elements#lists)\n- [x] [Linked List Element](https://github.com/react-native-community/react-native-elements#lists)\n- [x] [Tab Bar Component](https://github.com/react-native-community/react-native-elements#tab-bar-component)\n- [x] [HTML style headings (h1, h2, etc...)](https://github.com/react-native-community/react-native-elements#html-style-headings)\n- [x] [Card component](https://github.com/react-native-community/react-native-elements#card)\n- [x] [Pricing Component](https://github.com/react-native-community/react-native-elements#pricing-component)\n- [x] [Grid Component](https://github.com/react-native-community/react-native-elements#grid-component)\n- [x] [Slider Component](https://github.com/react-native-community/react-native-elements#slider-component)\n- [x] [Tile Component](https://github.com/react-native-community/react-native-elements#tile-component)\n- [x] [Avatar Component](https://github.com/react-native-community/react-native-elements#avatar-component)\n\n## Roadmap\n\n#### IN PROGRESS\n- [ ] [Add Unit Tests](https://github.com/react-native-community/react-native-elements/issues/196)\n- [ ] [Create React Native Elements Website](https://github.com/react-native-community/react-native-elements/issues/43)\n\n#### FIRST CONTRIBUTORS\n- [ ] [Add Profile Component](https://github.com/react-native-community/react-native-elements/issues/129)\n- [ ] [Add Header Component](https://github.com/react-native-community/react-native-elements/issues/47)\n- [ ] [Add featuredTile prop in Tile](https://github.com/react-native-community/react-native-elements/issues/188)\n- [ ] [Add Badge Component](https://github.com/react-native-community/react-native-elements/issues/203)\n- [ ] Expose & document Divider Component\n- [ ] Refactor Social Icon to use Button\n\n#### NOT STARTED\n- [ ] [Floating labels on FormInput](https://github.com/react-native-community/react-native-elements/issues/94)\n- [ ] [Compatibility with react-native-web](https://github.com/react-native-community/react-native-elements/issues/110)\n- [ ] [Support Multiple FormInput refs](https://github.com/react-native-community/react-native-elements/issues/147)\n- [ ] [Two-Marker Slider](https://github.com/react-native-community/react-native-elements/issues/15)\n- [ ] [Add Notification Component](https://github.com/react-native-community/react-native-elements/issues/190)\n- [ ] [Add Image Component which supports parallax](https://github.com/react-native-community/react-native-elements/issues/203)\n- [ ] [Add DatePicker/Calendar Component](https://github.com/react-native-community/react-native-elements/issues/214)\n- [ ] [Add Theming & Default Styles](https://github.com/react-native-community/react-native-elements/issues/216)\n- [ ] Something you's like to see? Submit an [issue](https://github.com/dabit3/react-native-elements/issues) or a [pull request](https://github.com/dabit3/react-native-elements/pulls)\n\n## Examples\nCheck out the pre built and configured [React Native Hackathon Starter Project](https://github.com/dabit3/react-native-hackathon-starter) which uses all of these elements.\n\n## Notes\n\n#### Fonts\nReact Native Elements uses the System font as the default font family for iOS and Sans Serif as the default font family for Android.\n\n**In the example screenshots, we are using Lato which can be downloaded [here](https://fonts.google.com/specimen/Lato?selection.family=Lato).**\n\n> We are working on a way to make a custom font family configurable through the command line.\n\n[Here](https://github.com/dabit3/react-native-fonts) is a list of fonts available out of the box for each platform, or you can install and use a custom font of your own.\n\nTo override the fontFamily in any element, simply provide a fontFamily prop:\n\n```js\n<Button\n  raised\n  icon={{name: 'cached'}}\n  title='RAISED WITH ICON'\n  fontFamily='Comic Sans MS' />\n\n```\n\n# API\n\n\n## Buttons\nButtons take a title and an optional [material icon name](https://design.google.com/icons/), as well as the props below.\n\n> You can override Material icons with one of the following: material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo by providing an icon.type as a prop.\n\n![Buttons](http://i.imgur.com/CVf1xbr.png)\n\n```js\nimport { Button } from 'react-native-elements'\n\n<Button\n  title='BUTTON' />\n\n<Button\n  raised\n  icon={{name: 'cached'}}\n  title='BUTTON WITH ICON' />\n\n<Button\n  large\n  iconRight\n  icon={{name: 'code'}}\n  title='LARGE WITH RIGHT ICON' />\n\n<Button\n  large\n  icon={{name: 'envira', type: 'font-awesome'}}\n  title='LARGE WITH RIGHT ICON' />\n\n<Button\n  large\n  icon={{name: 'squirrel', type: 'octicon', buttonStyle: styles.someButtonStyle }}\n  title='OCTICON' />\n\n```\n\n#### Button props\n\n> Also recevies all TouchableWithoutFeedback props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| Component | TouchableHighlight (iOS), TouchableNativeFeedback (android) | React Native Component | Specify other component such as TouchableOpacity or other (optional) |\n| buttonStyle | none | object (style) | add additional styling for button component (optional) |\n| title | none | string | button title (required) |\n| large | false | boolean | makes button large |\n| fontFamily | System font (iOS), Sans Serif (android) | string | specify different font family |\n| fontWeight | none | string | specify font weight for title (optional) |\n| iconRight | false | boolean | moves icon to right of title |\n| onPress | none | function | onPress method (required) |\n| onLongPress | none | function | onLongPress method (optional) |\n| icon | {color: 'white'} | object {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), style: object(style)} | icon configuration (optional) |\n| backgroundColor | #397af8 | string (color) | background color of button (optional) |\n| borderRadius | none | number | adds border radius to button (optional) |\n| color | white | string(color) | font color (optional) |\n| textStyle | none | object (style) | text styling (optional)  |\n| fontSize | 18 | number | font size (optional)  |\n| underlayColor | transparent | string(color) | underlay color for button press (optional)  |\n| raised | false | boolean | flag to add raised button styling (optional)  |\n| disabled | false | boolean | prop to indicate button is disabled (optional) |\n| disabledStyle | none | object (style) | disabled button styling (optional) |\n\n## Social Icons & Buttons\n\n![Social Icons](http://i.imgur.com/HYZ5sbP.png)\n\n```js\nimport { SocialIcon } from 'react-native-elements'\n\n// Icon\n<SocialIcon\n  type='twitter'\n/>\n\n<SocialIcon\n  raised={false}\n  type='gitlab'\n/>\n\n<SocialIcon\n  light\n  type='medium'\n/>\n\n<SocialIcon\n  light\n  raised={false}\n  type='medium'\n/>\n\n\n// Button\n<SocialIcon\n  title='Sign In With Facebook'\n  button\n  type='facebook'\n/>\n\n<SocialIcon\n  title='Some Twitter Message'\n  button\n  type='twitter'\n/>\n\n<SocialIcon\n  button\n  type='medium'\n/>\n\n\n<SocialIcon\n  button\n  light\n  type='instagram'\n/>\n\n```\n\n#### SocialIcon props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| title | none | string | title if made into a button (optional) |\n| type | none | social media type (facebook, twitter, google-plus-official, pinterest, linkedin, youtube, vimeo, tumblr, instagram, quora, foursquare, wordpress, stumbleupon, github, github-alt, twitch, medium, soundcloud, gitlab, angellist, codepen) | social media type (required) |\n| raised | true | boolean | raised adds a drop shadow, set to false to remove |\n| button | false | boolean | creates button (optional) |\n| onPress | none | function | onPress method (optional) |\n| onLongPress | none | function | onLongPress method (optional) |\n| light | false | boolean | reverses icon color scheme, setting background to white and icon to primary color |\n| iconStyle | none | object (style) | extra styling for icon component (optional) |\n| style | none | object (style) | button styling (optional) |\n| iconColor | white | string | icon color (optional) |\n| iconSize | 24 | number | icon size (optional) |\n| component | TouchableHighlight | React Native Component | type of button (optional)  |\n| fontFamily | System font bold (iOS), Sans Serif Black (android) | string | specify different font family (optional) |\n| fontWeight | bold (ios), black(android) | string | specify font weight of title if set as a button with a title |\n| fontStyle | none | object (style) | specify text styling (optional) |\n| disabled | false | boolean | disable button (optional) |\n| loading | false | boolean | shows loading indicator (optional) |\n\n\n## Icons & Icon Buttons\n\n![Icons](http://i.imgur.com/2A28abz.png)\n\nIcons take the name of a [material icon](https://design.google.com/icons/) as a prop.\n\n> You can override Material icons with one of the following: [material-community](https://materialdesignicons.com/), [font-awesome](http://fontawesome.io/icons/), [octicon](https://octicons.github.com/), [ionicon](http://ionicons.com/), [foundation](http://zurb.com/playground/foundation-icon-fonts-3), [evilicon](http://evil-icons.io/), [simple-line-icon](http://simplelineicons.com/), [zocial](http://weloveiconfonts.com/), or [entypo](http://www.entypo.com/) by providing a type prop.\n\n> Hint: use **reverse** to make your icon look like a button\n\n```js\n\nimport { Icon } from 'react-native-elements'\n\n<Icon\n  name='rowing' />\n\n<Icon\n  name='g-translate'\n  color='#00aced' />\n\n<Icon\n  name='sc-telegram'\n  type='evilicon'\n  color='#517fa4'\n/>\n\n<Icon\n  reverse\n  name='ios-american-football'\n  type='ionicon'\n  color='#517fa4'\n/>\n\n<Icon\n  raised\n  name='heartbeat'\n  type='font-awesome'\n  color='#f50'\n  onPress={() => console.log('hello')} />\n\n```\n\n#### Icon props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| name | none | string | name of icon (required) |\n| type | material | string | type (defaults to material, options are `material-community, zocial, font-awesome, octicon, ionicon, foundation, evilicon, simple-line-icon, or entypo`) |\n| size | 26 | number | size of icon (optional) |\n| color | black | string | color of icon (optional) |\n| iconStyle | inherited style | object (style) | additional styling to icon (optional) |\n| component | View if no onPress method is defined, TouchableHighlight if onPress method is defined | React Native component | update React Native Component (optional) |\n| onPress | none | function | onPress method for button (optional) |\n| onLongPress | none | function | onLongPress method for button (optional) |\n| underlayColor | icon color | string | underlayColor for press event |\n| reverse | false | boolean | reverses color scheme (optional) |\n| raised | false | boolean | adds box shadow to button (optional) |\n| containerStyle | inherited styling | object (style) | add styling to container holding icon (optional) |\n| reverseColor | white | string | specify reverse icon color (optional) |\n\n\n\n## Lists\n\n![Lists](http://i.imgur.com/7V8CIfl.png)\n\n#### Using Map Function. Implemented with avatar.\n\n```js\nimport { List, ListItem } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\n<List containerStyle={{marginBottom: 20}}>\n  {\n    list.map((l, i) => (\n      <ListItem\n        roundAvatar\n        avatar={{uri:l.avatar_url}}\n        key={i}\n        title={l.name}\n      />\n    ))\n  }\n</List>\n\n```\n\n#### Using Map Function. Implemented with link and icon.\n\n```js\nimport { List, ListItem } from 'react-native-elements'\n\nconst list = [\n  {\n    title: 'Appointments',\n    icon: 'av-timer'\n  },\n  {\n    title: 'Trips',\n    icon: 'flight-takeoff'\n  },\n  ... // more items\n]\n\n<List>\n  {\n    list.map((item, i) => (\n      <ListItem\n        key={i}\n        title={item.title}\n        leftIcon={{name: item.icon}}\n      />\n    ))\n  }\n</List>\n```\n\n#### Using RN ListView. Implemented with link and avatar.\n\n```js\nimport { List, ListItem } from 'react-native-elements'\n\nconst list = [\n  {\n    name: 'Amy Farha',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\n    subtitle: 'Vice President'\n  },\n  {\n    name: 'Chris Jackson',\n    avatar_url: 'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',\n    subtitle: 'Vice Chairman'\n  },\n  ... // more items\n]\n\nrenderRow (rowData, sectionID) {\n  return (\n    <ListItem\n      roundAvatar\n      key={sectionID}\n      title={rowData.name}\n      subtitle={rowData.subtitle}\n      avatar={{uri:rowData.avatar_url}}\n    />\n  )\n}\n\nrender () {\n  return (\n    <List>\n      <ListView\n        renderRow={this.renderRow}\n        dataSource={this.state.dataSource}\n      />\n    </List>\n  )\n}\n\n```\n\n#### ListItem implemented with custom View for Subtitle\n\n```js\nimport { List, ListItem } from 'react-native-elements'\n\nrender () {\n  return (\n    <List>\n      <ListItem\n        roundAvatar\n        title='Limited supply! Its like digital gold!'\n        subtitle={\n          <View style={styles.subtitleView}>\n            <Image source={require('../images/rating.png')} style={styles.ratingImage}/>\n            <Text style={styles.ratingText}>5 months ago</Text>\n          </View>\n        }\n        avatar={require('../images/avatar1.jpg')}\n      />\n    </List>\n  )\n}\n\nstyles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: 'grey'\n  }\n})\n\n```\n\n#### List Props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| containerStyle | marginTop: 20, borderTopWidth: 1, borderBottomWidth: 1, borderBottomColor: #cbd2d9 | object (style) | style the list container |\n\n\n#### ListItem props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| avatar | none | object| left avatar (optional). Refer to [React Native Image Source](https://facebook.github.io/react-native/docs/images.html) |\n| avatarStyle | none | object (style) | avatar styling (optional) |\n| chevronColor | #bdc6cf | string | set chevron color |\n| component | View or TouchableHighlight if onPress method is added as prop | React Native element | replace element with custom element (optional) |\n| containerStyle | none | object (style) | additional main container styling (optional) |\n| hideChevron | false | boolean | set if you do not want a chevron (optional) |\n| leftIcon | none | object {name, color, style, type} (type defaults to material icons) | icon configuration for left icon (optional) |\n| rightIcon | {name: 'chevron-right'} | object {name, color, style, type} (type defaults to material icons) | icon configuration for right icon (optional). Shows up unless hideChevron is set |\n| onPress | none | function | onPress method for link (optional) |\n| onLongPress | none | function | onLongPress method for link (optional) |\n| roundAvatar | false | boolean | make left avatar round |\n| subtitle | none | string, number or object | subtitle text or custom view (optional) |\n| subtitleContainerStyle | none | style (object) | provide styling for subtitle container |\n| subtitleStyle | none | object (style) | additional subtitle styling (optional ) |\n| title | none | string, number or object | main title for list item, can be text or custom view (required) |\n| titleStyle | none | object (style) | additional title styling (optional) |\n| titleContainerStyle | none | style (object) | provide styling for title container |\n| wrapperStyle | none | object (style) | additional wrapper styling (optional) |\n| underlayColor | white | string | define underlay color for TouchableHighlight (optional) |\n| fontFamily | HelevticaNeue (iOS), Sans Serif (android) | string | specify different font family |\n| rightTitle | none | string | provide a rightTitle to have a title show up on the right side of the button |\n| rightTitleContainerStyle | flex: 1, alignItems: 'flex-end', justifyContent: 'center' | object (style) | style the outer container of the rightTitle text |\n| rightTitleStyle | marginRight: 5, color: '#bdc6cf' | object (style) | style the text of the rightTitle text |\n| label | none | react native component | add a label with your own styling by providing a label={<SomeComponent />} prop to ListItem |\n\n#### Badges\n![Badges](http://i.imgur.com/qvJgGF2.png)\n\nYou can now easily add a badge to your List Item    \n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| badge | none | object, accepts the following properties: value (string), badgeContainerStyle (object), badgeTextStyle (object). You can override the default badge by providing your own component with it's own styling by providing badge={{ element: <YourCustomElement /> }} | add a badge to the ListItem by using this prop |     \n\nExample badge usage\n```js\n<ListItem\n  ...\n  badge={{ value: 3, badgeTextStyle: { color: 'orange' }, badgeContainerStyle: { marginTop: -20 } }}\n/>\n\n<ListItem\n  ...\n  badge={{ element: <MyCustomElement> }}\n/>\n\n```\n\n\n## SideMenu\n\n![Side Menu](http://i.imgur.com/cjIcRl6.gif)\n\n> This component implements [react-native-side-menu](https://github.com/react-native-community/react-native-side-menu) which is part of the [react-native-community](https://github.com/react-native-community).\n\n```js\nimport { SideMenu, List, ListItem } from 'react-native-elements'\n\nconstructor () {\n  super()\n  this.state = {\n    isOpen: false\n  }\n  this.toggleSideMenu = this.toggleSideMenu.bind(this)\n}\n\nonSideMenuChange (isOpen: boolean) {\n  this.setState({\n    isOpen: isOpen\n  })\n}\n\ntoggleSideMenu () {\n  this.setState({\n    isOpen: !this.state.isOpen\n  })\n}\n\nrender () {\n  const MenuComponent = (\n    <View style={{flex: 1, backgroundColor: '#ededed', paddingTop: 50}}>\n      <List containerStyle={{marginBottom: 20}}>\n      {\n        list.map((l, i) => (\n          <ListItem\n            roundAvatar\n            onPress={() => console.log('Pressed')}\n            avatar={l.avatar_url}\n            key={i}\n            title={l.name}\n            subtitle={l.subtitle}\n          />\n        ))\n      }\n      </List>\n    </View>\n  )\n\n  return (\n    <SideMenu\n      isOpen={this.state.isOpen}\n      onChange={this.onSideMenuChange.bind(this)}\n      menu={MenuComponent}>\n      <App toggleSideMenu={this.toggleSideMenu.bind(this)} />\n    </SideMenu>\n  )\n}\n\n```\n\n#### SideMenu props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| menu | inherited | React.Component | Menu component |\n| isOpen |false | Boolean | Props driven control over menu open state |\n| openMenuOffset | 2/3 of device screen width | Number | Content view left margin if menu is opened |\n| hiddenMenuOffset | none | Number | Content view left margin if menu is hidden |\n| edgeHitWidth | none | Number | Edge distance on content view to open side menu, defaults to 60 |\n| toleranceX | none | Number | X axis tolerance |\n| toleranceY | none | Number | Y axis tolerance |\n| disableGestures | false | Bool | Disable whether the menu can be opened with gestures or not |\n| onStartShould <br /> SetResponderCapture | none | Function | Function that accepts event as an argument and specify if side-menu should react on the touch or not. Check https://facebook.github.io/react-native/docs/gesture-responder-system.html for more details |\n| onChange | none | Function | Callback on menu open/close. Is passed isOpen as an argument |\n| onMove | none | Function | Callback on menu move. Is passed left as an argument |\n| menuPosition | left | String | either 'left' or 'right' |\n| animationFunction | none | (Function -> Object) | Function that accept 2 arguments (prop, value) and return an object: <br /> - `prop` you should use at the place you specify parameter to animate <br /> - `value` you should use to specify the final value of prop |\n| animationStyle | none | (Function -> Object) | Function that accept 1 argument (value) and return an object: <br /> - `value` you should use at the place you need current value of animated parameter (left offset of content view) |\n| bounceBackOnOverdraw | true | boolean | when true, content view will bounce back to openMenuOffset when dragged further |\n\n> For issues or feature requests related to SideMenu component please click [here](https://github.com/react-native-community/react-native-side-menu/issues)\n\n## Search Bar\n\n<img src=\"https://i.imgur.com/mvPgPfg.png\" width=\"300\" >\n\n```js\nimport { SearchBar } from 'react-native-elements'\n\n<SearchBar\n  onChangeText={someMethod}\n  placeholder='Type Here...' />\n\n<SearchBar\n  noIcon\n  onChangeText={someMethod}\n  placeholder='Type Here...' />\n\n<SearchBar\n  round\n  onChangeText={someMethod}\n  placeholder='Type Here...' />\n\n<SearchBar\n  lightTheme\n  onChangeText={someMethod}\n  placeholder='Type Here...' />\n\n```\n\n#### SearchBar props\n\n##### This component inherits [all native TextInput props that come with a standard React Native TextInput element](https://facebook.github.io/react-native/docs/textinput.html), along with the following:\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| containerStyle | inherited styling | object (style) | style the container of the TextInput |\n| inputStyle | inherited styling | object (style) | style the TextInput |\n| icon | { color: '#86939e', name: 'search' } | object {name (string), color (string), style (object)} | specify color, styling, or another [Material Icon Name](https://design.google.com/icons/) |\n| noIcon | false | boolean | remove icon from textinput |\n| lightTheme | false | boolean | change theme to light theme |\n| round | false | boolean | change TextInput styling to rounded corners |\n| containerRef | none | ref | ref for TextInput conainer |\n| textInputRef | none | ref | ref for TextInput |\n| focus | none | function | call focus on the textinput(optional), eg `this.refs.someInputRef.focus()` |\n| underlineColorAndroid | transparent | string (color) | specify other than the default transparent underline color |\n| loadingIcon | { color: '#86939e' } | object {color (string), style (object)} | specify color, styling of the loading ActivityIndicator effect |\n| showLoadingIcon | false | boolean | show the loading ActivityIndicator effect |\n| placeholder | '' | string | set the placeholder text |\n| placeholderTextColor | '#86939e' | string | set the color of the placeholder text |\n| onChangeText | none | function | method to fire when text is changed |\n| clearIcon | { color: '#86939e', name: 'search' } | object {name (string), color (string), style (object)} | specify color, styling, or another [Material Icon Name](https://design.google.com/icons/)\n(Note: pressing on this icon clears text inside the searchbar) |\n\n## Tab Bar Component\n\n![Tab Bar Component](http://i.imgur.com/61lOjCy.png)\n\n> This component implements the [react-native-tab-navigator](https://github.com/exponentjs/react-native-tab-navigator) from [Exponent](https://getexponent.com/). Check out [Exponent](https://getexponent.com/) if you haven't already!\n\n```js\nimport { Tabs, Tab, Icon } from 'react-native-elements'\n\nconstructor() {\n  super()\n  this.state = {\n    selectedTab: 'profile',\n  }\n}\n\nchangeTab (selectedTab) {\n  this.setState({selectedTab})\n}\n\nconst { selectedTab } = this.state\n\n<Tabs>\n  <Tab\n    titleStyle={{fontWeight: 'bold', fontSize: 10}}\n    selectedTitleStyle={{marginTop: -1, marginBottom: 6}}\n    selected={selectedTab === 'feed'}\n    title={selectedTab === 'feed' ? 'FEED' : null}\n    renderIcon={() => <Icon containerStyle={{justifyContent: 'center', alignItems: 'center', marginTop: 12}} color={'#5e6977'} name='whatshot' size={33} />}\n    renderSelectedIcon={() => <Icon color={'#6296f9'} name='whatshot' size={30} />}\n    onPress={() => this.changeTab('feed')}>\n    <Feed />\n  </Tab>\n  <Tab\n    titleStyle={{fontWeight: 'bold', fontSize: 10}}\n    selectedTitleStyle={{marginTop: -1, marginBottom: 6}}\n    selected={selectedTab === 'profile'}\n    title={selectedTab === 'profile' ? 'PROFILE' : null}\n    renderIcon={() => <Icon containerStyle={{justifyContent: 'center', alignItems: 'center', marginTop: 12}} color={'#5e6977'} name='person' size={33} />}\n    renderSelectedIcon={() => <Icon color={'#6296f9'} name='person' size={30} />}\n    onPress={() => this.changeTab('profile')}>\n    <Profile />\n  </Tab>\n  /* ... more tabs here */\n</Tabs>\n\n```\n\n### Hide Tab Bar\n\n```js\nconstructor () {\n  super()\n  this.state = {\n    hideTabBar: true,\n  }\n}\n\nhideTabBar(value) {\n  this.setState({\n    hideTabBar: value\n  });\n}\n\nlet tabBarStyle = {};\nlet sceneStyle = {};\nif (this.state.hideTabBar) {\n  tabBarStyle.height = 0;\n  tabBarStyle.overflow = 'hidden';\n  sceneStyle.paddingBottom = 0;\n}\n\n<Tabs hidesTabTouch tabBarStyle={tabBarStyle} sceneStyle={sceneStyle}>\n  <Tab>\n    <LoginView hideTabBar={this.hideTabBar.bind(this)} />\n  </Tab>\n  /* ... tabs here */\n</Tabs>\n\n```\n\n### Tabs Props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| sceneStyle | inherited | object (style) | define for rendered scene |\n| tabBarStyle | inherited | object (style) | define style for TabBar |\n| tabBarShadowStyle | inherited | object (style) | define shadow style for tabBar |\n| hidesTabTouch | false | boolean | disable onPress opacity for Tab |\n\n### Tab Props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| renderIcon | none | function | returns Item icon |\n| renderSelectedIcon | none | function | returns selected Item icon |\n| badgeText | none | string or number | text for Item badge |\n| renderBadge | none | function | returns Item badge |\n| title | none | string | Item title |\n| titleStyle | inherited | style | styling for Item title |\n| selectedTitleStyle | none | style | styling for selected Item title |\n| tabStyle | inherited | style | styling for tab |\n| selected | none | boolean | return whether the item is selected |\n| onPress | none | function | onPress method for Item |\n| allowFontScaling | false | boolean | allow font scaling for title |\n\n> For issues or feature requests related to Tab Bar component please click [here](https://github.com/exponentjs/react-native-tab-navigator/issues)\n\n## HTML Style Headings\n\n![HTMLHeadings](https://i.imgur.com/xX3LCUY.png)\n\n```js\n<Text h1>Heading 1</Text>\n<Text h2>Heading 2</Text>\n<Text h3>Heading 3</Text>\n<Text h4>Heading 4</Text>\n```\n\n### Headings Props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| h1 | none | boolean | font size 40 (optional) |\n| h2 | none | boolean | font size 34 (optional) |\n| h3 | none | boolean | font size 28 (optional) |\n| h4 | none | boolean | font size 22 (optional) |\n| fontFamily | none | string | font family name (optional) |\n| style | none | object (style) | add additional styling for Text (optional) |\n\n## ButtonGroup\n\n![ButtonGroup](http://i.imgur.com/uBJbULr.png)\n\nUsing strings\n\n```js\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nrender () {\n  const buttons = ['Hello', 'World', 'Buttons']\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n\n```\n\nUsing components\n\n```js\nconstructor () {\n  super()\n  this.state = {\n    selectedIndex: 2\n  }\n  this.updateIndex = this.updateIndex.bind(this)\n}\nupdateIndex (selectedIndex) {\n  this.setState({selectedIndex})\n}\n\nconst component1 = () => <Text>Hello</Text>\nconst component2 = () => <Text>World</Text>\nconst component3 = () => <Text>ButtonGroup</Text>\n\nrender () {\n  const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n  const { selectedIndex } = this.state\n  return (\n    <ButtonGroup\n      onPress={this.updateIndex}\n      selectedIndex={selectedIndex}\n      buttons={buttons}\n      containerStyle={{height: 100}} />\n  )\n}\n\n```\n\n#### ButtonGroup props\n\n##### This component inherits [all native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements](https://facebook.github.io/react-native/docs/touchablehighlight.html), along with the following:\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| selectedIndex | none | number | current selected index of array of buttons (required) |\n| onPress | none | function | method to update Button Group Index (required) |\n| buttons | none | array | array of buttons for component (required), if returning a component, must be an object with { element: componentName } |\n| component | TouchableHighlight | React Native Component | Choose other button component such as TouchableOpacity (optional) |\n| containerStyle | inherited styling | object (style) | specify styling for main button container (optional) |\n| selectedBackgroundColor | white | string | specify color for selected state of button (optional) |\n| textStyle | inherited styling | object (style) | specify specific styling for text (optional) |\n| selectedTextStyle | inherited styling | object (style) | specify specific styling for text in the selected state (optional)|\n| underlayColor | white | string | specify underlayColor for TouchableHighlight (optional) |\n| borderStyle | inherited styling | object (style) | update the styling of the interior border of the list of buttons (optional) |\n\n## Checkboxes\n\n![Checkboxes](http://i.imgur.com/8BKC77S.png)\n\n```js\n\nimport { CheckBox } from 'react-native-elements'\n\n<CheckBox\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here'\n  checkedIcon='dot-circle-o'\n  uncheckedIcon='circle-o'\n  checked={this.state.checked}\n/>\n\n<CheckBox\n  center\n  title='Click Here to Remove This Item'\n  iconRight\n  iconType='material'\n  checkedIcon='clear'\n  uncheckedIcon='add'\n  checkedColor='red'\n  checked={this.state.checked}\n/>\n\n```\n\n#### Checkbox props\n\n> This component uses FontAwesome icons out of the box. You can also specify one of the following types of icons by specifying an iconType prop: Simple Line Icon, Zocial, Octicons, MaterialIcons, MaterialCommunityIcons, Ionicons, Foundation, EvilIcons, or Entypo\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| iconType | fontawesome | string | icon family, can be one of the following: simple-line-icon, zocial, octicon, material, material-community, ionicon, foundation, evilicon, entypo (required only if specifying an icon that is not from font-awesome) |\n| component | TouchableOpacity | React Native Component | specify React Native component for main button (optional) |\n| checked | false | boolean | flag for checking the icon (required) |\n| iconRight | false | boolean | moves icon to right of text (optional) |\n| right | false | boolean | aligns checkbox to right (optional) |\n| center | false | boolean | aligns checkbox to center (optional) |\n| title | none | string | title of checkbox (required) |\n| containerStyle | none | object (style) | style of main container (optional) |\n| textStyle | none | object (style) | style of text (optional) |\n| onLongPress | none | function | onLongPress function for  checkbox (optional) |\n| onLongIconPress | none | function | onLongPress function for  checkbox (optional) |\n| onPress | none | function | onPress function for container (optional) |\n| onIconPress | none | function | onPress function for checkbox (required) |\n| checkedIcon | check-square-o | string | default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/)) (optional) |\n| uncheckedIcon | square-o | string | default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/)) (optional) |\n| checkedColor | green | string | default checked color (optional) |\n| uncheckedColor | #bfbfbf | string | default unchecked color (optional) |\n| checkedTitle | none | string | specify a custom checked message (optional) |\n| fontFamily | System font bold (iOS), Sans Serif Bold (android) | string | specify different font family |\n\n## Forms\n\n![Forms](http://i.imgur.com/bnoD5rl.png)\n\n```js\nimport { FormLabel, FormInput } from 'react-native-elements'\n\n<FormLabel>Name</FormLabel>\n<FormInput onChangeText={someFunction}/>\n<FormValidationMessage>Error message</FormValidationMessage>\n```\n\n#### FormValidationMessage example\n![FormValidationMessage example](http://i.imgur.com/IHVmL5d.png)\n\n#### FormInput props\n\n##### This component inherits [all native TextInput props that come with a standard React Native TextInput element](https://facebook.github.io/react-native/docs/textinput.html), along with the following:\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| containerStyle | none | object (style) | TextInput container styling (optional) |\n| inputStyle | none | object (style) | TextInput styling (optional) |\n| textInputRef | none | ref | get ref of TextInput |\n| containerRef | none | ref | get ref of TextInput container |\n| focus | none | function | call focus on the textinput(optional), eg `this.refs.someInputRef.focus()` |\n\n#### FormLabel props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| containerStyle | none | object (style) | additional label container style (optional) |\n| labelStyle | none | object (style) | additional label styling (optional) |\n| fontFamily | System font bold (iOS), Sans Serif Bold (android) | string | specify different font family |\n\n#### FormValidationMessage props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| containerStyle | none | object (style) | additional label container style (optional) |\n| labelStyle | none | object (style) | additional label styling (optional) |\n| fontFamily | System font bold (iOS), Sans Serif Bold (android) | string | specify different font family |\n\n#### Using FormInput refs\n\n```js\n<FormInput\n  ref='forminput'\n  textInputRef='email'\n  ...\n/>\n```\nYou should be able to access the refs like this\n\n```\nthis.refs.forminput.refs.email\n\n```\n\n## Card\n\n![Card Component](http://i.imgur.com/bY5uAC3.png)\n\n```js\n\nconst users = [\n {\n    name: 'brynn',\n    avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg'\n },\n ... // more users here\n]\n\nimport { Text } from 'react-native'\nimport { Card, ListItem, Button } from 'react-native-elements'\n\n// implemented without image with header\n<Card\n  title='CARD WITH DIVIDER'>\n  {\n    users.map((u, i) => {}\n  }\n</Card>\n\n// implemented without image without header, using ListItem component\n <Card containerStyle={{padding: 0}} >\n  {\n    users.map((u, i) => {\n      return (\n        <ListItem\n          key={i}\n          roundAvatar\n          title={u.name}\n          avatar={{uri:u.avatar}} />\n\n      )\n    })\n  }\n</Card>\n\n\n// implemented with Text and Button as children\n<Card\n  title='HELLO WORLD'\n  image={require('../images/pic2.jpg')}>\n  <Text style={{marginBottom: 10}}>\n    The idea with React Native Elements is more about component structure than actual design.\n  </Text>\n  <Button\n    icon={{name: 'code'}}\n    backgroundColor='#03A9F4'\n    fontFamily='Lato'\n    buttonStyle={{borderRadius: 0, marginLeft: 0, marginRight: 0, marginBottom: 0}}\n    title='VIEW NOW' />\n</Card>\n\n```\n\n#### Card props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| flexDirection | column | string | flex direction (row or column) (optional) |\n| containerStyle | none | object (style) | outer container style (optional) |\n| wrapperStyle | none | object (style) | inner container style (optional) |\n| title | none | string | optional card title (optional) |\n| titleStyle | none | object (style) | additional title styling (if title provided) (optional) |\n| dividerStyle | none | object (style) | additional divider styling (if title provided) (optional) |\n| fontFamily | System font bold (iOS), Sans Serif Bold (android) | string | specify different font family |\n| imageStyle | inherited styling | object(style) | specify image styling if image is provided |\n| image | none | image uri or require path | add an image as the heading with the image prop (optional) |\n\n\n## Pricing Component\n\n![Pricing Component](http://i.imgur.com/EMMDZwo.png)\n\n```js\nimport { PricingCard } from 'react-native-elements'\n\n<PricingCard\n  color='#4f9deb'\n  title='Free'\n  price='$0'\n  info={['1 User', 'Basic Support', 'All Core Features']}\n  button={{ title: 'GET STARTED', icon: 'flight-takeoff' }}\n/>\n\n```\n\n#### PricingCard props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| title | none | string | title (required) |\n| price | none | string | price (required) |\n| color | none | string | color scheme for button & title (required) |\n| info | none | array of strings | pricing information (optional) |\n| button | none | object {title, icon, buttonStyle} | button information (required) |\n| onButtonPress | none | any | function to be run when button is pressed |\n| containerStyle | inherited styling | object (style) | outer component styling (optional) |\n| wrapperStyle | inherited styling | object (style) | inner wrapper component styling (optional) |\n| titleFont | System font (font weight 800) (iOS), Sans Serif Black (android) | string | specify title font family |\n| pricingFont | System font (font weight 700) (iOS), Sans Serif Bold (android) | string | specify pricing font family |\n| infoFont | System font bold (iOS), Sans Serif Bold (android) | string | specify pricing information font family |\n| buttonFont | System font (iOS), Sans Serif (android) | string | specify button font family |\n\n## Grid Component\n\nThe Grid component provides two types of layouts, Row and Column. This provides you with an easy way to position your elements on screen without using flex directly.\n\n> This component was inspired from [react-native-easy-grid](https://github.com/GeekyAnts/react-native-easy-grid) by [GeekyAnts](https://github.com/GeekyAnts). Check out [NativeBase.io](http://nativebase.io/) if you haven't already!\n\n#### Row\n\n<img src=\"http://i.imgur.com/1e8W6j6.png\" width=\"300\" >\n\n```js\nimport {Grid, Row} from 'react-native-elements';\n\n<Grid>\n  <Row></Row>\n  <Row></Row>\n</Grid>\n```\n\n#### Column\n\n<img src=\"http://i.imgur.com/MWIBLKk.png\" width=\"300\" >\n\n```js\nimport {Grid, Col} from 'react-native-elements';\n\n<Grid>\n  <Col></Col>\n  <Col></Col>\n</Grid>\n```\n\nCreating nested layout\n\n<table width=\"100\" height=\"100\">\n  <tr>\n    <td rowspan=\"2\" width=\"50\">1</td>\n    <td width=\"50\" height=\"50\">2</td>\n  </tr>\n  <tr>\n    <td>3</td>\n  </tr>\n</table>\n\n<img src=\"http://i.imgur.com/PZ4vR6z.png\" width=\"300\" >\n\n```js\nimport {Grid, Col, Row} from 'react-native-elements';\n\n<Grid>\n  <Col></Col>\n  <Col>\n    <Row></Row>\n    <Row></Row>\n  </Col>\n</Grid>\n```\n\n#### Using the size prop\n\nA ratio can be passed to the Size Prop\n\n<img src=\"https://i.imgur.com/xYDQ3XV.png\" width=\"300\" >\n\n```js\n<Grid>\n  <Row size={3}></Row>\n  <Row size={1}></Row>\n</Grid>\n```\n\n<img src=\"http://i.imgur.com/34nfZtP.png\" width=\"300\" >\n\n```js\n<Grid>\n  <Col size={75}></Col>\n  <Col size={25}></Col>\n</Grid>\n```\n\n#### GridComponent Props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| containerStyle | none | object (style) | Outer grid styling (optional) |\n| onPress | none | function | onPress method (optional) |\n| activeOpacity | 1 | number | Opacity on pressing (optional) |\n\n#### ColComponent Props\n\n| props | default | type | description |\n| ---- | ---- | ---- | ---- |\n| containerStyle | none | object (style) | Styling for the outer column (optional) |\n| size | none | number | Size for column (optional) |\n| onPress | none | function | onPress method (optional) |\n| activeOpacity | 1 | number | Opacity on pressing (optional) |\n\n#### RowComponent Props\n\n| props | default | type | description |\n| ---- | ---- | ---- | ---- |\n| containerStyle | none | object (style) | Styling for the outer column (optional) |\n| size | none | number | Size for row (optional) |\n| onPress | none | function | onPress method (optional) |\n| activeOpacity | 1 | number | Opacity on pressing (optional) |\n\n\n## Slider Component\n\n![Slider Component](https://github.com/react-native-community/react-native-elements/blob/v0.9.0/src/slider/slider_screenshot.png)\n\nA pure JavaScript <Slider> component for react-native. It is a drop-in replacement for Slider.\n\n> This component is a forked implementation of  [react-native-slider](https://github.com/jeanregisser/react-native-slider). Also note that due to the nature of the platform, and the existence of breaking changes between React Native releases, this implementation currently only supports v0.26.0+\n\n```js\nimport { Slider } from 'react-native-elements'\n\n<View style={{flex: 1, alignItems: 'stretch', justifyContent: 'center'}}>\n  <Slider\n    value={this.state.value}\n    onValueChange={(value) => this.setState({value})} />\n  <Text>Value: {this.state.value}</Text>\n</View>\n\n```\n## Slider Props\n\nprop                  | type     | optional | default                   | description\n--------------------- | -------- | -------- | ------------------------- | -----------\nvalue                 | number   | Yes      | 0                         | Initial value of the slider\ndisabled              | bool     | Yes      | false                     | If true the user won't be able to move the slider\nminimumValue          | number   | Yes      | 0                         | Initial minimum value of the slider\nmaximumValue          | number   | Yes      | 1                         | Initial maximum value of the slider\nstep                  | number   | Yes      | 0                         | Step value of the slider. The value should be between 0 and maximumValue - minimumValue)\nminimumTrackTintColor | string   | Yes      | '#3f3f3f'                 | The color used for the track to the left of the button\nmaximumTrackTintColor | string   | Yes      | '#b3b3b3'                 | The color used for the track to the right of the button\nthumbTintColor        | string   | Yes      | '#343434'                 | The color used for the thumb\nthumbTouchSize        | object   | Yes      | `{width: 40, height: 40}` | The size of the touch area that allows moving the thumb. The touch area has the same center as the visible thumb. This allows to have a visually small thumb while still allowing the user to move it easily.\nonValueChange         | function | Yes      |                           | Callback continuously called while the user is dragging the slider\nonSlidingStart        | function | Yes      |                           | Callback called when the user starts changing the value (e.g. when the slider is pressed)\nonSlidingComplete     | function | Yes      |                           | Callback called when the user finishes changing the value (e.g. when the slider is released)\nstyle                 | [style](http://facebook.github.io/react-native/docs/view.html#style)    | Yes      |                           | The style applied to the slider container\ntrackStyle            | [style](http://facebook.github.io/react-native/docs/view.html#style)    | Yes      |                           | The style applied to the track\nthumbStyle            | [style](http://facebook.github.io/react-native/docs/view.html#style)    | Yes      |                           | The style applied to the thumb\ndebugTouchArea        | bool     | Yes      | false                     | Set this to true to visually see the thumb touch rect in green.\nanimateTransitions    | bool     | Yes      | false                     | Set to true if you want to use the default 'spring' animation\nanimationType         | string   | Yes      | 'timing'                  | Set to 'spring' or 'timing' to use one of those two types of animations with the default [animation properties](https://facebook.github.io/react-native/docs/animations.html).\nanimationConfig       | object   | Yes      | undefined                 | Used to configure the animation parameters.  These are the same parameters in the [Animated library](https://facebook.github.io/react-native/docs/animations.html).\n\n## Tile Component\n\nA component with full size image and with text either inside the image or under the image along with customizable caption\n\n> This component was inspired from [Shoutem UI](https://github.com/shoutem/ui) by [Shoutem](https://github.com/shoutem). Check out [Shoutem](http://shoutem.github.io/) if you haven't already!\n\n#### Featured Tile\n![screen shot 2017-01-15 at 9 50 15 pm](https://cloud.githubusercontent.com/assets/6476108/21969491/beea4630-db6c-11e6-8913-7cc8813e35d6.png)\n\n```js\n<Tile\n   imageSrc={{require: ('./img/path')}}\n   title=\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem\"\n   featured\n   caption=\"Some Caption Text\"\n/>\n```\n#### Featured Tile with Icon\n![screen shot 2017-01-15 at 9 50 22 pm](https://cloud.githubusercontent.com/assets/6476108/21969581/6004e408-db6d-11e6-9379-556a0c5e967a.png)\n\n```js\n<Tile\n  imageSrc={{require: ('./img/path')}}\n  icon={{name: 'play-circle', type: 'font-awesome'}}\n  featured\n/>\n```\n#### Tile with Icon\n![screen shot 2017-01-15 at 9 50 34 pm](https://cloud.githubusercontent.com/assets/6476108/21969683/fce073f0-db6d-11e6-8d03-6e42c15627a9.png)\n\n```js\n<Tile\n  imageSrc={{require: ('./img/path')}}\n  title=\"Lorem ipsum dolor sit amet, consectetur\"\n  icon={{name: 'play-circle', type: 'font-awesome'}}  // optional\n  contentContainerStyle={{height: 70}}\n>\n  <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-between'}}>\n    <Text>Caption</Text>\n    <Text>Caption</Text>\n  </View>\n</Tile>\n```\n\n### Tile Props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| icon | none | object {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)} | Icon Component Props (optional) |\n| iconContainerStyle | none | object (style) | Styling for the outer icon container (optional) |\n| title | none | string | Text inside the tile (optional) |\n| titleStyle | none | object (style) | Styling for the title (optional) |\n| caption | none | string | Text inside the tilt when tile is featured\n| captionStyle | none | object (style) | Styling for the caption (optional) |\n| featured | false | boolean | Changes the look of the tile (optional) |\n| containerStyle | none | object (style) | Styling for the outer tile container (optional) |\n| imageSrc | none | object (image) | Source for the image (required) |\n| imageContainerStyle | none | object (style) | Styling for the image (optional) |\n| onPress | none | function (event) | Function to call when tile is pressed (optional) |\n| activeOpacity | 0.2 | number | Number passed to control opacity on press (optional) |\n| contentContainerStyle | none | object (style) | Styling for bottom container when not featured tile (optional) |\n| width | Device Width | number | Width for the tile (optional) |\n| height | Device Width * 0.8 | number | Height for the tile |\n\n## Avatar Component\n\n<img src=\"https://github.com/react-native-community/react-native-elements/blob/master/src/avatar/avatar_all.png\" width=\"500\" >\n\n#### Avatars\n\n<img src=\"https://github.com/react-native-community/react-native-elements/blob/master/src/avatar/avatar_with_images.png\" width=\"500\" >\n\n``` js\n<Avatar\n  small\n  rounded\n  source={{uri: \"https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg\"}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  medium\n  source={{uri: \"https://s3.amazonaws.com/uifaces/faces/twitter/kfriedson/128.jpg\"}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  large\n  source={{uri: \"https://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg\"}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  xlarge\n  rounded\n  source={{uri: \"https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\"}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n```\n\n#### Avatar with initials\n\n<img src=\"https://github.com/react-native-community/react-native-elements/blob/master/src/avatar/avatar_with_initials.png\" width=\"500\" >\n\n```js\n<Avatar\n  small\n  rounded\n  title=\"MT\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  medium\n  title=\"BP\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  large\n  title=\"LW\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n<Avatar\n  xlarge\n  rounded\n  title=\"CR\"\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n/>\n```\n\n#### Avatar with icons\n\n<img src=\"https://github.com/react-native-community/react-native-elements/blob/master/src/avatar/avatar_with_icons.png\" width=\"500\" >\n\n``` js\n<Avatar\n  small\n  rounded\n  icon={{type: 'user'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 2, marginLeft: 20, marginTop: 115}}\n/>\n<Avatar\n  medium\n  overlayContainerStyle={{backgroundColor: 'blue'}}\n  icon={{type: 'meetup', color: 'red'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 3, marginTop: 100}}\n/>\n<Avatar\n  large\n  icon={{type: 'rocket', color: 'orange'}}\n  overlayContainerStyle={{backgroundColor: 'white'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 4, marginTop: 75}}\n/>\n<Avatar\n  xlarge\n  rounded\n  icon={{type: 'home'}}\n  onPress={() => console.log(\"Works!\")}\n  activeOpacity={0.7}\n  containerStyle={{flex: 5, marginRight: 60}}\n/>\n```\n\n### Avatar Props\n\n| prop | default | type | description |\n| ---- | ---- | ----| ---- |\n| component | TouchableOpacity | function | component for enclosing element (eg: TouchableHighlight, View, etc) |\n| width | 34 | number | width for the Avatar |\n| height | 34 | number | height for the Avatar |\n| onPress | none | function | callback function when pressing component |\n| onLongPress | none | function | callback function when long pressing component |\n| containerStyle | none | object (style) | styling for outer container |\n| source | none | object (image) | image source |\n| avatarStyle | none | object (style) | style for avatar image |\n| rounded | false | boolean | determines the shape of avatar |\n| title | none | string | renders title in the avatar |\n| titleStyle | none | object (style) | style for the title |\n| overlayContainerStyle | none | object (style) | style for the view outside image or icon |\n| activeOpacity | 0.2 | number | opacity when pressed |\n| icon | none | object {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)} |\n| iconStyle | none | object (style) | extra styling for icon component (optional) |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/dabit3/React-Native-Elements.git"
  },
  "scripts": {},
  "version": "0.10.3"
}
